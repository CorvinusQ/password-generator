import argparse
import secrets
import string
import sys

def generate_password(
    length: int = 12,
    use_uppercase: bool = True,
    use_lowercase: bool = True,
    use_digits: bool = True,
    use_symbols: bool = True,
    exclude_ambiguous: bool = False
) -> str:
    if length <= 0:
        raise ValueError("–î–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.")

    chars = ""
    if use_lowercase:
        chars += string.ascii_lowercase
    if use_uppercase:
        chars += string.ascii_uppercase
    if use_digits:
        chars += string.digits
    if use_symbols:
        chars += "!@#$%^&*()_+-=[]{}|;:,.<>?"

    if exclude_ambiguous:
        ambiguous = "l1I0O"
        chars = ''.join(c for c in chars if c not in ambiguous)

    if not chars:
        raise ValueError("–ù–∞–±–æ—Ä —Å–∏–º–≤–æ–ª–æ–≤ –ø—É—Å—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.")

    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ –∫–∞–∂–¥–æ–≥–æ –≤–∫–ª—é—á—ë–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
    password = []
    if use_lowercase:
        password.append(secrets.choice(string.ascii_lowercase))
    if use_uppercase:
        password.append(secrets.choice(string.ascii_uppercase))
    if use_digits:
        password.append(secrets.choice(string.digits))
    if use_symbols:
        password.append(secrets.choice("!@#$%^&*()_+-=[]{}|;:,.<>?"))

    if len(password) > length:
        raise ValueError(
            "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã. "
            "–£–≤–µ–ª–∏—á—å—Ç–µ –¥–ª–∏–Ω—É –∏–ª–∏ –æ—Ç–∫–ª—é—á–∏—Ç–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–ª–∞—Å—Å—ã."
        )

    # –î–æ–∑–∞–ø–æ–ª–Ω—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
    remaining = length - len(password)
    password += [secrets.choice(chars) for _ in range(remaining)]

    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º
    secrets.SystemRandom().shuffle(password)
    return ''.join(password)


def main():
    parser = argparse.ArgumentParser(
        description="üîê –ù–∞–¥—ë–∂–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π –Ω–∞ Python",
        epilog="–ü—Ä–∏–º–µ—Ä: python password_gen.py -l 16 --no-symbols --exclude-ambiguous"
    )

    parser.add_argument(
        '-l', '--length',
        type=int,
        default=12,
        help='–î–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 12)'
    )

    parser.add_argument(
        '--no-uppercase',
        action='store_true',
        help='–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã'
    )

    parser.add_argument(
        '--no-lowercase',
        action='store_true',
        help='–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã'
    )

    parser.add_argument(
        '--no-digits',
        action='store_true',
        help='–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ü–∏—Ñ—Ä—ã'
    )

    parser.add_argument(
        '--no-symbols',
        action='store_true',
        help='–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã'
    )

    parser.add_argument(
        '--exclude-ambiguous',
        action='store_true',
        help='–ò—Å–∫–ª—é—á–∏—Ç—å –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (l, 1, I, 0, O)'
    )

    parser.add_argument(
        '--count',
        type=int,
        default=1,
        help='–°–∫–æ–ª—å–∫–æ –ø–∞—Ä–æ–ª–µ–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1)'
    )

    args = parser.parse_args()

    # –í–∞–ª–∏–¥–∞—Ü–∏—è: —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–∏–ø —Å–∏–º–≤–æ–ª–æ–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∫–ª—é—á—ë–Ω
    if (args.no_uppercase and args.no_lowercase and args.no_digits and args.no_symbols):
        parser.error("–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∫–ª—é—á—ë–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–∏–ø —Å–∏–º–≤–æ–ª–æ–≤!")

    if args.count < 1:
        parser.error("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–æ–ª–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å >= 1")

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è
    for _ in range(args.count):
        try:
            pwd = generate_password(
                length=args.length,
                use_uppercase=not args.no_uppercase,
                use_lowercase=not args.no_lowercase,
                use_digits=not args.no_digits,
                use_symbols=not args.no_symbols,
                exclude_ambiguous=args.exclude_ambiguous
            )
            print(pwd)
        except ValueError as e:
            print(f"–û—à–∏–±–∫–∞: {e}", file=sys.stderr)
            sys.exit(1)


if __name__ == "__main__":
    main()
